// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/SmirnovND/metrics/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ServiceCollectorInterface is an autogenerated mock type for the ServiceCollectorInterface type
type ServiceCollectorInterface struct {
	mock.Mock
}

// FindMetric provides a mock function with given fields: nameMetric, typeMetric
func (_m *ServiceCollectorInterface) FindMetric(nameMetric string, typeMetric string) (domain.MetricInterface, error) {
	ret := _m.Called(nameMetric, typeMetric)

	if len(ret) == 0 {
		panic("no return value specified for FindMetric")
	}

	var r0 domain.MetricInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.MetricInterface, error)); ok {
		return rf(nameMetric, typeMetric)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.MetricInterface); ok {
		r0 = rf(nameMetric, typeMetric)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MetricInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nameMetric, typeMetric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricValue provides a mock function with given fields: nameMetric, typeMetric
func (_m *ServiceCollectorInterface) GetMetricValue(nameMetric string, typeMetric string) (string, error) {
	ret := _m.Called(nameMetric, typeMetric)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(nameMetric, typeMetric)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(nameMetric, typeMetric)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nameMetric, typeMetric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMetric provides a mock function with given fields: m
func (_m *ServiceCollectorInterface) SaveMetric(m domain.MetricInterface) {
	_m.Called(m)
}

// NewServiceCollectorInterface creates a new instance of ServiceCollectorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceCollectorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceCollectorInterface {
	mock := &ServiceCollectorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
