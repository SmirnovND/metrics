// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/SmirnovND/metrics/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MemStorageInterface is an autogenerated mock type for the MemStorageInterface type
type MemStorageInterface struct {
	mock.Mock
}

// ExecuteWithLock provides a mock function with given fields: fn
func (_m *MemStorageInterface) ExecuteWithLock(fn func(map[string]domain.MetricInterface)) {
	_m.Called(fn)
}

// GetMetric provides a mock function with given fields: name, typeMetric
func (_m *MemStorageInterface) GetMetric(name string, typeMetric string) (domain.MetricInterface, error) {
	ret := _m.Called(name, typeMetric)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 domain.MetricInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.MetricInterface, error)); ok {
		return rf(name, typeMetric)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.MetricInterface); ok {
		r0 = rf(name, typeMetric)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MetricInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, typeMetric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetric provides a mock function with given fields: metricNew
func (_m *MemStorageInterface) UpdateMetric(metricNew domain.MetricInterface) {
	_m.Called(metricNew)
}

// NewMemStorageInterface creates a new instance of MemStorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemStorageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemStorageInterface {
	mock := &MemStorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
